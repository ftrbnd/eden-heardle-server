generator cli {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  earlySupporter      Boolean?             @default(false)
  accounts            Account[]
  CustomHeardle       CustomHeardle?
  FirstCompletedDaily FirstCompletedDaily?
  guesses             Guesses?
  sessions            Session[]
  statistics          Statistics?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Statistics {
  id            String @id @default(cuid())
  maxStreak     Int    @default(0)
  gamesPlayed   Int    @default(0)
  gamesWon      Int    @default(0)
  userId        String @unique
  currentStreak Int    @default(0)
  accuracy      Int    @default(0)
  firstStreak   Int    @default(0)
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Guesses {
  id     String        @id @default(cuid())
  userId String        @unique
  songs  GuessedSong[]
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GuessedSong {
  id            String  @id @default(cuid())
  name          String
  album         String?
  cover         String
  correctStatus String
  guessListId   String
  duration      Int?
  guessList     Guesses @relation(fields: [guessListId], references: [id], onDelete: Cascade)
}

model DailySong {
  id         String    @id @default(cuid())
  name       String
  album      String?
  cover      String
  link       String
  startTime  Int?
  heardleDay Int?
  nextReset  DateTime?
  duration   Int?
}

model Song {
  id       String  @id @default(cuid())
  name     String
  album    String?
  cover    String
  link     String
  duration Int?
}

model CustomHeardle {
  id            String  @id @default(cuid())
  userId    String  @unique
  name      String
  album     String?
  cover     String
  link      String
  startTime Int
  duration  Int?
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UnlimitedHeardle {
  id            String  @id @default(cuid())
  name      String
  album     String?
  cover     String
  link      String
  startTime Int
  duration  Int?
}

model FirstCompletedDaily {
  id            String  @id @default(cuid())
  userId String? @unique
  User   User?   @relation(fields: [userId], references: [id])
}
